//定义一个定时器lev，var lev = 100;用于确定速度
//网格大小，现在是30x30  var num=30; 就是你要走的步数
//定义方向键： 0:up  1:down  2:left  3:right  var direction=3; 
//用于管理定时器 var handle；
//分数 var score=0;
//暂停使用 var pause = true;

//获取canvas

//获取上下文context

//定义两个数组分别存放舍身的X坐标和Y坐标var snakex=new Array();var snakey=new Array();

//定义一个数组，用于存放食物的位置 var prize=new Array();  

//定义一个产生随机数的方法rand（）；return parseInt(Math.random()*num); 

//检查是否结束，包括越界chk(x,y),返回true

//如果x<0||y<0,则游戏结束，返回false

//走的步数超过，则游戏结束x>num-1||y>num-1

//循环判断是不是在蛇身上var i=0; i!=snakex.length-1;i++
//如果snakex[i]==x&&snakey[i]==y，则游戏结束返回false

//定义打印分数函数drawScore(text)

//清楚一块区域context.clearRect(0,0,300,50);

//填充文本为context.fillText("Score:"+text,5,5);

//产生食物的位置函数makeprize()

//定义一个boolean类型变量flag，用于判断食物是否在蛇身中var flag = false;

//定义一个2个参数的数组用于存放食物的位置var prizepre=new Array(2);

//如果食物不在蛇身中，改变flag的值为true

//随机食物的坐标并且复制给数组 prizepre：prizepre[0]=rand();prizepre[1]=rand();

//循环我的蛇身，var i=0; i!=snakex.length;i++

//判断蛇身的位置，如果和食物的位置重合，则改变flag的值为false:
//(snakex[i]==prizepre[0])&&(snakey[i]==prizepre[1])

//将食物位置赋值： prize=prizepre;

//画点，共30X30个点（10*10像素算1个点）：
//drawNode(x,y)context.fillRect(x*10+1,y*10+1,10,10);

//清楚画点clearNode(x,y):context.clearRect(x*10+1,y*10+1,10,10);


//定义一个函数runscore(x,y)来判断是否吃到食物，并做处理返回false;
//如果食物的位置和给定参数的坐标位置一致，则加分prize[0]==x&&prize[1]==y；score = score+1;
//执行绘制分数函数 drawScore(score);
//重定义蛇身的位置： snakex[snakex.length]=prize[0];snakey[snakey.length]=prize[1];
//重新执行产生食物函数：  makeprize();
//重新绘点：drawNode(prize[0],prize[1]);并且返回true

//定时器用来判断snake行进方向等等run()

//使用switch来判断方向并且执行相应操作

//0:上，蛇身坐标x不变，y-1; 
//snakex[snakex.length]=snakex[snakex.length-1];
//snakey[snakey.length]=snakey[snakey.length-1]-1;

//1:下，蛇身坐标x不变，y+1; 
//snakex[snakex.length]=snakex[snakex.length-1];
//snakey[snakey.length]=snakey[snakey.length-1]+1;

//3:左，蛇身坐标不变，x-1; 
//snakex[snakex.length]=snakex[snakex.length-1]-1;
//snakey[snakey.length]=snakey[snakey.length-1];

//4:右，蛇身坐标不变，x+1; 
//snakex[snakex.length]=snakex[snakex.length-1]+1;
//snakey[snakey.length]=snakey[snakey.length-1];

//如果没有吃到食物，!runscore(snakex[snakex.length-1],snakey[snakey.length-1])
//检查是否结束，包括越界：如果
//chk(snakex[snakex.length-1],snakey[snakey.length-1])==false
//清楚计时器clearInterval(handle);
//绘制文本drawScore('\tGame over');并且return;

//绘制画点drawNode(snakex[snakex.length-1],snakey[snakey.length-1]);

//清楚画点： clearNode(snakex[0],snakey[0]);
//shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值: snakex.shift(); snakey.shift();

//定义初始化函数init(),设置画布大小，启动定时器等等

//设置画布狂傲为510和600 canvas.width = 510;canvas.height = 600;

//设置字体的基本位置样式 context.textBaseline = "top";

//绘制文本：context.fillText('P键开始/暂停，方向键控制',0,350);

//初始化分数：drawScore('');

//绘制矩形：context.strokeRect(0,30,302,302);

//绘制食物： makeprize();

//画点食物： drawNode(prize[0],prize[1]);

//初始化第一个蛇身： snakex[0]=0;snakey[0]=0;

//画点蛇身：drawNode(snakex[0],snakey[0]);

//添加函数用于判断键盘的位置,注册键盘事件，up38，down40，left37，right39，暂停键p80 document.onkeydown=function(event){ var e = event || window.event;  }

//if(e&&e.keyCode==38){direction=0;}

//if(e&&e.keyCode==40){direction=1;}

//if(e&&e.keyCode==37){direction=2;}

//if(e&&e.keyCode==39){direction=3;}

if(e&&e.keyCode==80){if(pause)
// {pause=false;handle=setInterval(run,lev);}
//else {pause=true;clearInterval(handle);}}
