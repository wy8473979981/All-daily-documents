 1  repeat( )函数：将目标字符串重复N次，返回一个新的字符串，不影响目标字符串。

    var name1 = "前端君";  //目标字符串
    var name2 =  name1.repeat(3);
    //变量name1被重复三次；

    console.log(name1); 
    //结果：前端君

    console.log(name2);
    //结果：前端君前端君前端君
    
2  includes( )函数：判断字符串中是否含有指定的子字符串，返回true表示含有和false表示未含有。第二个参数选填，表示开始搜索的位置。


    var name = "前端君";    //目标字符串
    name.includes('君');   
    //true, 含有

    name.includes('web');  
    //false, 不含有

    name.includes('前',1); 
    //false, 从第2个字符开始搜索, 不含有


        传统的做法我们可以借助indexOf( )函数来实现，如果含有指定的字符串，indexOf( )函数就会子字符串首次出现的位置，不含有，则返回-1。我们通过返回值是否为-1
        来判断字符串中是否含有指定的子字符串，但是，我们现在可以用includes( )函数代替indexOf( )函数，因为它的返回值更直观（true或false），况且我们并不关心子字符串出现的位置。

        注意，上面最后一句代码，第二个参数为1，表示从第2个字符“端“开始搜索，第一个字符”前“的位置是0；
        
3  startsWith( )函数：判断指定的子字符串是否出现在目标字符串的开头位置，第二个参数选填，表示开始搜索的位置。
 

    var name = "前端君";  //目标字符串

    name.startsWith('前'); 
    //true，出现在开头位置

    name.startsWith('端'); 
    //false，不是在开头位置

    name.startsWith('端',1); 
    //true，从第2个字符开始


        我们如果判断字符串是否以某个子字符串开头，就可以直接使用startsWith( )函数即可，同样，第二个参数为1表示从第2个字符开始搜索。若要从第一个字符开始搜索，
        参数应该为0或者为空（默认从第一个字符开始搜索）。
        
4    endsWith( )函数：判断子字符串是否出现在目标字符串的尾部位置，第二个参数选填，表示针对前N个字符。


    var name = "我就是前端君";    //目标字符串

    name.endsWith('我');
    //false，不在尾部位置


    name.endsWith('君'); 
    //true，在尾部位置


    name.endsWith('君',5); 
    //false，只针对前5个字符


    name.endsWith('君',6);
    //true，针对前6个字符
    
5	codePointAt( )对特殊字符做处理，可以识别4个字节的字符
	javascript中，一个字符固定为2个字节，对于那些需要4个字节存储的字符，javascript会认为它是两个字符，此时它的字符长度length为2。
	如字符："𠮷"，就是一个需要4个字节存储，length为2的字符。这会有什么问题呢？对于4字节的字符， javascript无法正确读取字符，我们来试试看。


    var str1 = "前端";
    var str2 = "𠮷";

    str1.length; //length为2
    str2.length; //length为2

    str1.charAt(0);  //前
    str1.charAt(1);  //端

    str2.charAt(0);  //'�'
    str2.charAt(1);  //'�'

        
        可以看到，str1和str2的长度length都是2，因为字符："𠮷"是一个4字节的字符，使用charAt函数（charAt() 方法可返回指定位置的字符）
        能正确读取字符串str1的字符，但无法正确读取4个字节的字符,此时返回结果出现了乱码。
        但是，如果我们使用ES6给我们提供的codePointAt( )函数，就可以处理这种4个字节的字符了，我们来看看怎么使用：


    var str = "𠮷";
    str.codePointAt();  //结果:134071

        
        对于这个长度length为2字符："𠮷"，codePointAt( )方法可以正确地识别出它是个4个字节的字符，并且能正确地返回它的码点的十进制数：134071，
        这个数字抓换成16进制就是20bb7，对应的Unicode编码则是\u20bb7。（什么是Unicode编码？稍后讲解）。

        什么？十进制的数字134071就是对应4个字节的字符："𠮷"了？能不能验证一下？通过134071这个数字反推回去，得到字符："𠮷"？

        可以的，ES6还提供了一个函数给我们来实现这个效果
        
6	String.fromCodePoint( )函数：函数的参数是一个字符对应的码点，返回的结果就是对应的字符，哪怕这个字符是一个4字节的字符，也能正确实现。
    
        正好可以利用上面得到的10进制数字134071反推一下。

    String.fromCodePoint(134071); //结果："𠮷"


        得到了我们预期的结果："𠮷"；同时也证明了上面的codePointAt( )函数能正确读取4个字节的字符。
        
7	 最后讲解的一个函数是String.raw( )；看函数名raw是未加工的的意思，正如这个函数的作用一样：返回字符串最原始的样貌，即使字符串中含有转义符，
	它都视而不见，直接输出。举个例子：

        未经String.raw( )处理的字符串：

    console.log(`hello\nworld`);
    //输出：hello
            world
            

        \n会被识别为换行符，实现换行效果，而经过String.raw( )的同一个字符串的结果是：


    console.log(String.raw`hello\nwolrd`);
    //输出：hello\nwolrd

        
    \n被识别为\和n两个字符，失去换行的效果，直接输出，这就是String.raw( )的功能。它常用来作为一个模板字符串的处理函数，也就是直接在后面加一个模板字符串。
     
        不知道学到这里，上面讲的模板字符串和标签模板是否已经忘得差不多了。不过能坚持认真看到这里的同学，算很认真刻苦了！
      
8	ES6给字符串带来了很多实用性的扩展：模板字符串，标签模板，repeat函数、includes函数，startsWith函数，endsWith函数，codePointAt函数，
	String.fromCodePoint函数，String.raw函数。还顺带学习了一些关于Unicode编码的知识。