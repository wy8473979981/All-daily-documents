 类class这个概念，在其他编程语言中很早就实现了，而JavaScript语言并没有实现，一直以来，开发者都是使用函数function和原型prototype来模拟类class实现面向对象的编程。
 
        接下来的学习，前端君默认大家都了解传统的模拟类的写法，如果你已经忘记了，ES6系列的第九节有介绍JavaScript的面向对象，点击可以查看。
 
        现在，ES6给我们带来了好消息，它给JavaScript带来了类class的概念。但实际上，JavaScript的类class本质上也是基于原型prototype的实现方式做了进一步的封装，让我们使用起来更简单明了。也就是说它实际上也是函数function和原型prototype实现。

基本用法
   
        那么，我们就使用ES6封装后的类class来实现我们想要的效果，我们来学学它的基本用法。

        声明一个类的写法：


    //定义一个叫Animal的类
    class Animal {
        //构造函数constructor
        constructor(color){
            this.color = color;
        }
    }
    

        代码很简短，我们通过关键字class来声明一个名字叫Animal的类，可以看到类里面（花括号 {}里面）有一个叫constructor方法，它就是构造方法，构造方法里面的this，指向的是该类实例化后的对象，这就是实现了一个类的声明。
 
        其中，构造方法constructor是一个类必须要有的方法，默认返回实例对象；创建类的实例对象的时候，会调用此方法来初始化实例对象。如果你没有编写constructor方法，执行的时候也会被加上一个默认的空的constructor方法。
 
类的属性和方法

        了解了类的声明和constructor构造函数的特点，我们下面来了解如何给类添加属性和方法。


    class Animal {
        //构造方法
        constructor(name){
            //属性name
            this.name = name;
        }

        //自定义方法getName
        getName(){
            return this.name;
        }
    }
    

        我们把类名后面的括号{ }里面的内容称之为类体，我们会在类体内来编写类的属性和方法。上面的案例中，类体内有2个方法：constructor( )、getName()。

        其中constructor方法是构造方法，在实例化一个类的时候被调用。constructor方法是必须的，也是唯一的，一个类体不能含有多个constructor构造方法。我们可以在方法里面自定义一些对象的属性，比如案例中的name属性。

        此外，我们还自定义了一个getName( )方法，它属于类的实例方法，实例化后对象可以调用此方法。
类的实例对象
        
        掌握了类的属性和方法的写法，接下来，我们学习如何创建对象和使用对象的实例方法：


    class Animal {
        //构造方法
        constructor(name){
            //属性name
            this.name = name;
        }

        //自定义方法getName
        getName(){
            return 'This is a'+this.name;
        }
    }

    //创建一个Animal实例对象dog
    let dog = new Animal('dog');
    dog.name; //结果：dog
    dog.getName(); //结果：This is a dog


        还是同一个类Animal，我们通过new来创建了实例对象dog，构造方法会把传进去的参数“dog”通过this.name赋值给对象的name属性，所以dog的name属性为“dog”，对象dog还可以调用自己的实例方法getName( )，结果返回：“This is a dog”。

        实例对象的创建有几个要注意的事项：

必须使用new创建字来创建类的实例对象
先声明定义类，再创建实例，否则会报错
类的静态方法

        上面讲到的自定义方法是实例方法，也就是实例化后的对象才可以调用的方法，比如上述案例的getName( )方法。除了实例方法以外，我们还可以定义一种直接使用类名即可访问的方法，我们称之为“静态方法”。

        我们一起来看看如何实现静态方法的定义：


    class Animal {
        //构造方法
        constructor(name){
            //属性name
            this.name = name;
        }

        //自定义一个静态方法
        static friends(a1,a2){
            return `${a1.name} and ${a2.name} are friends`;
        }
    }

    //创建2个实例
    let dog = new Animal('dog');
    let cat = new Animal('cat');
    
    //调用静态方法friends
    Animal.friends(dog,cat);
    //结果：dog and cat are friends


        静态方法和实例方法不同的是：静态方法的定义需要使用static关键字来标识，而实例方法不需要；此外，静态方法通过类名来的调用，而实例方法通过实例对象来调用。

        上述案例的friends( )方法中，我们用到了字符串模板的知识，是ES6给String字符串带来的新特性，第六节有讲解，点击可以查看。
 
类的继承

        说到类class，就不得不说类的继承，ES6使用extends关键字来实现子类继承父类，我们来演示一下：


    //父类Animal
    class Animal {//...}

    //子类Dog
    class Dog extends Animal {
        //构造方法
        constructor(name,color){
            super(name);
            this.color = color;
        }
    }
    

        上面的案例中，我们定义两个类，Animal类作为父类，Dog类作为子类，然后通过关键字extends来实现继承，此外，我们还注意到一个关键字super，它相当于是父类中的this。
 
        我们可以用super来引用父类，访问父类的方法，我们来演示一下：


    //父类Animal
    class Animal {
        //构造方法
        constructor(name){
            //属性name
            this.name = name;
        }
        
        //父类的自定义方法
        say(){
            return `This is a animal`;
        }
    }


    //子类Dog
    class Dog extends Animal {
        //构造方法
        constructor(name,color){
            super(name);
            this.color = color;
        }

        //子类的实例方法
        getAttritube(){
            return `${super.say()},
                    name：${this.name},
                    color:${this.color}`;
        }
    }

    //创建Dog的实例对象
    let d = new Dog("dog","black");

    //调用子类的Dog的实例方法
    d.getAttritube();
    //结果：This is a animal,
                name：dog,
                color:black

        在父类中，我们定义了say方法，想要在子类中调用父类的say方法的话，我们使用super.say( )即可实现。

        使用super有几个要注意的事项：

子类必须在constructor方法中调用super方法
必须先调用super( )，才可以使用this，否则报错
       
        以上就是关于类继承的介绍，重点在于关键字extends和super，尤其是super的理解和使用，大家需要理解透彻。
 
        如果是完全没有接触过类class和面向对象的初学者，看这一节也许不能完全理解透彻，你可以先翻看第九节的JavaScript面向对象的介绍。
 
本节小结
总结：ES6给JavaScript带来了类class的概念和实现，实际上是对传统实现方式的一种包装，通过关键字class来定义类，通过extends来实现继承，子类的super是父类的引用，在继承中起着十分重要的作用。
