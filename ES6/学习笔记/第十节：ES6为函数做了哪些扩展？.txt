箭头函数

	箭头函数，这又是一个新概念，ES6给我们介绍一种全新的定义函数的方式，就是用箭头符号（=>），故得名为箭头函数。具体怎么用，我们来看案例：


    //传统写法
    var sum = function(a) {
       return  a ;
    };
    
    //箭头函数写法
    var sum = a => a;

        
        什么？第二种写法这么简短.....不敢信！！

        上面演示了两种写法，函数的作用都是一样的，传入参数a，直接返回a；第一种传统的写法大家都熟悉，我们看看第二种写法：a=>a; 
        这里的第一个a代表是传进去的参数，箭头=>后面的a表示函数体；也许大家跟我一样，很不习惯，但这种写法确实简洁了很多。

        看到这里，有开发经验的“老司机”可能会问：如果传入的参数不止一个，或者函数体不是简单的返回a，需要做一些其他的运算，含有多条语句的话，怎么办？

        问得好，对于这种情况，我们又有另一种处理办法。举个例子，假如我们给函数传入2个参数，然后进行相加运算，我们用箭头函数来实现：


    //箭头函数写法
    var sum = (a,b) => {return a+b}
    sum(1,2);//结果：3


        注意上面的参数和函数体部分，如果参数超过1个的话，需要用小括号（）括起来，函数体语句超过1条的时候，需要用大括号{ }括起来。

        箭头函数的最大作用就是简化函数的实现，大大地减少代码量。来举个例子对比一下，假设我们现在要对一个数组 [ 1,2,3,4 ] 里面的数求和，
        我们分别用传统的方式和箭头函数都实现一次，大家看看差别：


    //传统的写法
    var sum = 0;
    [1,2,3,4].forEach(function(v){
        sum += v;
    });
    
    //箭头函数的写法
    var sum = 0;
    [1,2,3,4].forEach(v => sum+=v);

    
        大家对比一下，用箭头函数代替了传统的匿名函数，确实减少了代码量